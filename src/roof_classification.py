#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jul 19 09:24:57 2025

@author: adrian
"""

import csv
import os
from qgis.core import (QgsProject, QgsVectorLayer, QgsFeature, 
                       Qgis,QgsMessageLog,
    QgsFields, QgsField, QgsVectorFileWriter, 
    QgsCoordinateTransformContext)
from PyQt5.QtWidgets import QDialog, QVBoxLayout, QComboBox, QPushButton, QLabel, QHBoxLayout, QLineEdit
import processing
from pathlib import Path
from PyQt5.QtCore import QVariant
import time
from qgis.utils import iface
from PyQt5.QtWidgets import QMessageBox, QFileDialog

# ≈öcie≈ºka do pliku CSV
project_path = QgsProject.instance().fileName()
project_directory = os.path.dirname(project_path)
csv_file = os.path.join(project_directory, "klasyfikacja_dachow.csv")
nazwa_pola = "ID_BUDYNKU"
kategorie = ["p≈Çaski", "jednospadowy", "dwuspadowy", "czterospadowy", "wielospadowy", "Pomi≈Ñ", "Inny", "Zako≈Ñcz"]
SCRIPTS_PATH = os.path.dirname(os.path.abspath(__file__))


    
# Skrypt do dodania kolumny "nachylenie" do warstwy QGIS
# i wype≈Çnienia jej warto≈õciami z kolumny "nachylenie_chmura" (NULL -> 0)

def add_nachylenie_column():
    """
    Dodaje kolumnƒô 'nachylenie' do warstwy 'budynki_z_szer_elew_front'
    i wype≈Çnia jƒÖ warto≈õciami z kolumny 'nachylenie_chmura' (NULL zamienia na 0)
    """
    
    # Nazwa warstwy do przetworzenia
    layer_name = "budynki_z_szer_elew_front"
    
    # Pobranie warstwy z aktualnego projektu
    layer = QgsProject.instance().mapLayersByName(layer_name)
    
    if not layer:
        print(f"B≈ÇƒÖd: Nie znaleziono warstwy o nazwie '{layer_name}'")
        return False
    
    layer = layer[0]  # Pierwszy element z listy warstw
    
    # Sprawdzenie czy warstwa ma kolumnƒô ≈∫r√≥d≈ÇowƒÖ
    source_field = "nachylenie_chmura"
    target_field = "nachylenie"
    
    fields = layer.fields()
    source_field_exists = fields.indexFromName(source_field) != -1
    target_field_exists = fields.indexFromName(target_field) != -1
    
    if not source_field_exists:
        print(f"B≈ÇƒÖd: Nie znaleziono kolumny ≈∫r√≥d≈Çowej '{source_field}'")
        return False
    
    # Rozpoczƒôcie edycji warstwy
    layer.startEditing()
    
    try:
        # Dodanie nowej kolumny je≈õli nie istnieje
        if not target_field_exists:
            new_field = QgsField(target_field, QVariant.Double)
            layer.dataProvider().addAttributes([new_field])
            layer.updateFields()
            print(f"Dodano nowƒÖ kolumnƒô '{target_field}'")
        else:
            print(f"Kolumna '{target_field}' ju≈º istnieje - aktualizowanie warto≈õci")
        
        # Pobranie indeks√≥w kolumn
        source_idx = layer.fields().indexFromName(source_field)
        target_idx = layer.fields().indexFromName(target_field)
        
        # Aktualizacja warto≈õci dla wszystkich obiekt√≥w
        updated_count = 0
        null_count = 0
        
        for feature in layer.getFeatures():
            source_value = feature[source_idx]
            
            # Sprawdzenie czy warto≈õƒá jest NULL i zamiana na 0
            if source_value is None or source_value == '':
                new_value = 0
                null_count += 1
            else:
                try:
                    new_value = int(source_value)
                except (ValueError, TypeError):
                    new_value = 0
                    null_count += 1
            
            # Aktualizacja warto≈õci w nowej kolumnie
            layer.changeAttributeValue(feature.id(), target_idx, new_value)
            updated_count += 1
        
        # Zatwierdzenie zmian
        layer.commitChanges()
        
        print("Operacja zako≈Ñczona pomy≈õlnie!")
        print(f"Zaktualizowano {updated_count} rekord√≥w")
        print(f"Zamieniono {null_count} warto≈õci NULL na 0")
        
        return True
        
    except Exception as e:
        # Cofniƒôcie zmian w przypadku b≈Çƒôdu
        layer.rollBack()
        print(f"B≈ÇƒÖd podczas wykonywania operacji: {str(e)}")
        return False


def zapis_do_gpkg(temp_layer):
    project_path = QgsProject.instance().fileName() 
    if project_path:
        project_directory = Path(project_path).parent
        print(f"Katalog projektu: {project_directory}")
    else:
        print("Projekt nie zosta≈Ç jeszcze zapisany.")
        project_directory = Path.cwd()

    layer_name = temp_layer.name()
    output_path = str(project_directory / f"{layer_name}.gpkg")

    if temp_layer:
        options = QgsVectorFileWriter.SaveVectorOptions()
        options.driverName = 'GPKG'
        options.fileEncoding = 'UTF-8'
        options.layerName = layer_name
        
        result = QgsVectorFileWriter.writeAsVectorFormatV3(
            temp_layer, 
            output_path, 
            QgsCoordinateTransformContext(), 
            options
        )
        
        if result[0] == QgsVectorFileWriter.NoError:
            print(f"Warstwa zosta≈Ça pomy≈õlnie zapisana do: {output_path}")
            QgsProject.instance().removeMapLayer(temp_layer)
            
            saved_layer = QgsVectorLayer(f"{output_path}|layername={layer_name}", layer_name, "ogr")
            if saved_layer.isValid():
                QgsProject.instance().addMapLayer(saved_layer)
                print("Warstwa zosta≈Ça pomy≈õlnie wczytana do projektu.")
            else:
                print("B≈ÇƒÖd podczas wczytywania warstwy.")
        else:
            print(f"B≈ÇƒÖd podczas zapisywania warstwy: {result[1]}")
    else:
        print("Nie znaleziono warstwy tymczasowej.")


# Tworzymy plik CSV, je≈õli nie istnieje
if not os.path.exists(csv_file):
    with open(csv_file, mode="w", newline="", encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(["ID_BUDYNKU", "Kategoria"])

        
def popraw_nachylenie_dla_plaskich(warstwa):
    idx_kat = warstwa.fields().indexFromName("Kategoria")
    idx_nach = warstwa.fields().indexFromName("nachylenie")
    licznik = 0

    if idx_kat == -1 or idx_nach == -1:
        print("‚ùå Nie znaleziono wymaganych p√≥l w warstwie.")
        return

    warstwa.startEditing()
    for f in warstwa.getFeatures():
        if f["Kategoria"] == "p≈Çaski":
            try:
                nach = float(f["nachylenie"])
                if nach > 5:
                    f[idx_nach] = 5
                    warstwa.updateFeature(f)
                    licznik += 1
            except Exception as e:
                print(f"‚ö†Ô∏è B≈ÇƒÖd przy analizie feature ID {f.id()}: {e}")
    warstwa.commitChanges()
    print(f"üîß Zmieniono nachylenie dla {licznik} dach√≥w p≈Çaskich > 5¬∞")


# def przewidz_kategorie(feature):
#     """Prosta analiza geometrii poligonu do przewidywania typu dachu"""
#     geom = feature.geometry()
#     powierzchnia = geom.area()
#     bbox = geom.boundingBox()
#     szerokosc = bbox.width()
#     wysokosc = bbox.height()
#     stosunek = szerokosc / wysokosc if wysokosc != 0 else 0
#     warstwa = QgsProject.instance().mapLayersByName('budynki_z_szer_elew_front')[0]
#     idx_nach = warstwa.fields().indexFromName("nachylenie_chmura")
#     nachylenie_chmura = feature[idx_nach]

    
#     if nachylenie_chmura < 10:
#         return "p≈Çaski"
#     elif stosunek >= 2.0:
#         return "dwuspadowy"
#     else:
#         return "czterospadowy"

def przewidz_kategorie(feature):
    """Prosta analiza geometrii poligonu do przewidywania typu dachu"""
    warstwa = QgsProject.instance().mapLayersByName('budynki_z_predykcjami')[0]
    idx_pred = warstwa.fields().indexFromName("PREDYKCJA")
    idx_prob = warstwa.fields().indexFromName("PEWNOSC")

    prediction = feature[idx_pred]
    pewnosc = feature[idx_prob]
    
    return [prediction,pewnosc]



class KategoriaDialog(QDialog):
    def __init__(self, id_poligonu, sugerowana_kategoria, pewnosc_predykcji,kategorie, parent=None):
        super().__init__(parent)
        self.setWindowTitle(f"Wyb√≥r kategorii dla {id_poligonu}")
        layout = QVBoxLayout()
        self.label = QLabel(f"Dach {id_poligonu} - \nsugerowana: {sugerowana_kategoria}; prawdopodobienstwo: {pewnosc_predykcji}")
        layout.addWidget(self.label)
        self.combo = QComboBox()
        self.combo.addItems(kategorie)
        self.combo.setCurrentText(sugerowana_kategoria)
        layout.addWidget(self.combo)
        self.input_other_category = QLineEdit()
        self.input_other_category.setPlaceholderText("Wpisz kategoriƒô (je≈õli 'Inny')")
        self.input_other_category.setEnabled(False)
        layout.addWidget(self.input_other_category)
        button_layout = QHBoxLayout()
        self.ok_button = QPushButton("OK")
        self.cancel_button = QPushButton("Anuluj")
        self.ok_button.clicked.connect(self.accept)
        self.cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(self.ok_button)
        button_layout.addWidget(self.cancel_button)
        layout.addLayout(button_layout)
        self.setLayout(layout)
        self.combo.currentTextChanged.connect(self.on_category_change)
        self.move(100, 100)
        
    def on_category_change(self):
        if self.combo.currentText() == "Inny":
            self.input_other_category.setEnabled(True)
        else:
            self.input_other_category.setEnabled(False)
    
    def get_selected_category(self):
        if self.combo.currentText() == "Inny":
            return self.input_other_category.text()
        return self.combo.currentText()


def remove_memory_layers():
    for lyr in QgsProject.instance().mapLayers().values():
        if lyr.dataProvider().name() == 'memory':
            QgsProject.instance().removeMapLayer(lyr.id())
     
            
def get_prediction_data_dir():
    """Zwraca ≈õcie≈ºkƒô do katalogu prediction_data w Downloads"""
    # Folder Downloads u≈ºytkownika
    downloads_dir = Path.home() / "Downloads"
    prediction_dir = downloads_dir / "prediction_data"
    
    # Utw√≥rz folder je≈õli nie istnieje
    prediction_dir.mkdir(exist_ok=True)
    
    return str(prediction_dir)


def wczytaj_csv_do_qgis(sciezka_csv, nazwa_kolumny_x=None, nazwa_kolumny_y=None, 
                        separator=None, crs_kod='EPSG:2180', nazwa_warstwy=None, 
                        kodowanie='UTF-8', auto_detect=True):
    """
    Wczytuje plik CSV jako warstwƒô do QGIS z automatycznƒÖ detekcjƒÖ separatora
    
    Args:
        sciezka_csv (str): ≈öcie≈ºka do pliku CSV
        nazwa_kolumny_x (str): Nazwa kolumny z wsp√≥≈ÇrzƒôdnƒÖ X (je≈õli None, wczyta jako tabelƒô atrybut√≥w)
        nazwa_kolumny_y (str): Nazwa kolumny z wsp√≥≈ÇrzƒôdnƒÖ Y (je≈õli None, wczyta jako tabelƒô atrybut√≥w)  
        separator (str): Separator u≈ºywany w pliku CSV (je≈õli None, auto-detekcja)
        crs_kod (str): Kod uk≈Çadu wsp√≥≈Çrzƒôdnych
        nazwa_warstwy (str): Nazwa warstwy (je≈õli None, u≈ºyje nazwy pliku)
        kodowanie (str): Kodowanie pliku
        auto_detect (bool): Czy automatycznie wykryƒá separator
    
    Returns:
        QgsVectorLayer: Wczytana warstwa lub None je≈õli b≈ÇƒÖd
    """
    import csv
    from urllib.parse import quote
    
    # Sprawd≈∫ czy plik istnieje
    if not os.path.exists(sciezka_csv):
        print(f"B≈ÇƒÖd: Plik {sciezka_csv} nie istnieje!")
        return None
    
    # Automatyczna detekcja separatora
    if separator is None and auto_detect:
        try:
            with open(sciezka_csv, 'r', encoding=kodowanie) as file:
                # Przeczytaj pierwszƒÖ liniƒô
                first_line = file.readline().strip()
                # Sprawd≈∫ r√≥≈ºne separatory
                separators = [' ', ',', ';', '\t', '|']
                separator_counts = {}
                
                for sep in separators:
                    count = first_line.count(sep)
                    if count > 0:
                        separator_counts[sep] = count
                
                if separator_counts:
                    # Wybierz separator z najwiƒôkszƒÖ liczbƒÖ wystƒÖpie≈Ñ
                    separator = max(separator_counts.items(), key=lambda x: x[1])[0]
                    print(f"Wykryty separator: '{separator}' (wystƒÖpienia: {separator_counts[separator]})")
                else:
                    separator = ' '  # Domy≈õlny separator spacja
                    print("Nie wykryto separatora, u≈ºywam spacji")
        except Exception as e:
            print(f"B≈ÇƒÖd przy detekcji separatora: {e}")
            separator = ' '  # Fallback na spacjƒô
    
    # Je≈õli nadal nie ma separatora, u≈ºyj spacji
    if separator is None:
        separator = ' '
    
    # Je≈õli nie podano nazwy warstwy, u≈ºyj nazwy pliku
    if nazwa_warstwy is None:
        nazwa_warstwy = os.path.splitext(os.path.basename(sciezka_csv))[0]
    
    # Zakoduj ≈õcie≈ºkƒô dla URI
    sciezka_zakodowana = quote(sciezka_csv.replace('\\', '/'))
    
    # Mapowanie separator√≥w dla QGIS URI
    separator_mapping = {
        ' ': '%20',     # spacja
        ',': ',',       # przecinek
        ';': ';',       # ≈õrednik  
        '\t': '\\t',    # tabulator
        '|': '|'        # pipe
    }
    
    separator_uri = separator_mapping.get(separator, separator)
    
    # Je≈õli sƒÖ wsp√≥≈Çrzƒôdne, stw√≥rz URI dla warstwy punktowej
    if nazwa_kolumny_x and nazwa_kolumny_y:
        uri = f"file:///{sciezka_zakodowana}?delimiter={separator_uri}&xField={nazwa_kolumny_x}&yField={nazwa_kolumny_y}&crs={crs_kod}&encoding={kodowanie}"
    else:
        # Je≈õli brak wsp√≥≈Çrzƒôdnych, wczytaj jako tabelƒô atrybut√≥w
        uri = f"file:///{sciezka_zakodowana}?delimiter={separator_uri}&encoding={kodowanie}"
    
    print(f"URI: {uri}")
    
    # Stw√≥rz warstwƒô
    warstwa = QgsVectorLayer(uri, nazwa_warstwy, "delimitedtext")
    
    # Sprawd≈∫ czy warstwa zosta≈Ça poprawnie wczytana
    if not warstwa.isValid():
        print(f"B≈ÇƒÖd: Nie mo≈ºna wczytaƒá warstwy z pliku {sciezka_csv}")
        print(f"Separator: '{separator}' (URI: '{separator_uri}')")
        print(f"Kodowanie: {kodowanie}")
        
        # Spr√≥buj z r√≥≈ºnymi kodowaniami
        kodowania_do_sprawdzenia = ['UTF-8', 'Windows-1250', 'ISO-8859-2', 'CP1252']
        for kod in kodowania_do_sprawdzenia:
            if kod != kodowanie:
                print(f"Pr√≥bujƒô z kodowaniem: {kod}")
                if nazwa_kolumny_x and nazwa_kolumny_y:
                    uri_test = f"file:///{sciezka_zakodowana}?delimiter={separator_uri}&xField={nazwa_kolumny_x}&yField={nazwa_kolumny_y}&crs={crs_kod}&encoding={kod}"
                else:
                    uri_test = f"file:///{sciezka_zakodowana}?delimiter={separator_uri}&encoding={kod}"
                
                warstwa_test = QgsVectorLayer(uri_test, nazwa_warstwy, "delimitedtext")
                if warstwa_test.isValid():
                    warstwa = warstwa_test
                    kodowanie = kod
                    print(f"‚úì Uda≈Ço siƒô z kodowaniem: {kod}")
                    break
        
        if not warstwa.isValid():
            print("Sprawd≈∫ czy nazwy kolumn i separator sƒÖ poprawne")
            # Wy≈õwietl pr√≥bkƒô pliku dla diagnostyki
            try:
                with open(sciezka_csv, 'r', encoding='utf-8', errors='ignore') as f:
                    print("Pierwsze 3 linie pliku:")
                    for i, line in enumerate(f):
                        if i >= 3:
                            break
                        print(f"  {i+1}: {repr(line.strip())}")
            except:
                pass
            return None
    
    # Dodaj warstwƒô do projektu
    QgsProject.instance().addMapLayer(warstwa)
    
    # Wy≈õwietl informacje o warstwie
    print(f"‚úì Wczytano warstwƒô: {nazwa_warstwy}")
    print(f"  - Liczba obiekt√≥w: {warstwa.featureCount()}")
    print(f"  - CRS: {warstwa.crs().authid()}")
    print(f"  - Separator: '{separator}'")
    print(f"  - Kodowanie: {kodowanie}")
    print(f"  - Kolumny: {[field.name() for field in warstwa.fields()]}")
    
    # Loguj do QGIS
    QgsMessageLog.logMessage(
        f"Wczytano warstwƒô CSV: {nazwa_warstwy} ({warstwa.featureCount()} obiekt√≥w)",
        "CSV Loader", 
        Qgis.Info
    )
    
    return warstwa

def wait_for_file():
    """
    Czeka na pojawienie siƒô pliku building_predictions.csv w katalogu PREDICTION_DIR
    """
    # Utw√≥rz pe≈ÇnƒÖ ≈õcie≈ºkƒô do pliku
    prediction_dir = PREDICTION_DIR

    file_path = Path(prediction_dir) / "building_predictions.csv"
    
    print(f"Oczekiwanie na plik: {file_path}")
    
    # Pƒôtla oczekiwania na plik
    while True:
        if file_path.exists() and file_path.is_file():
            print(f"Plik znaleziony: {file_path}")
            return str(file_path)
        else:
            print(f"Plik nie istnieje. Sprawdzam ponownie za 5 sekund...")
            time.sleep(5)
            
def apply_qml_style_to_layer(layer, qml_file_path=None, show_messages=True):
    """
    Aplikuje styl QML do warstwy wektorowej.
    
    Args:
        layer: Obiekt QgsVectorLayer lub nazwa warstwy (str)
        qml_file_path: ≈öcie≈ºka do pliku QML (str). Je≈õli None, otworzy dialog wyboru pliku
        show_messages: Czy pokazywaƒá komunikaty o b≈Çƒôdach/sukcesie (bool)
    
    Returns:
        bool: True je≈õli stylizacja zosta≈Ça zastosowana pomy≈õlnie, False w przeciwnym razie
    """
    
    # Konwersja nazwy warstwy na obiekt warstwy je≈õli potrzeba
    if isinstance(layer, str):
        layer_name = layer
        layer = None
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layer_name:
                layer = lyr
                break
        
        if layer is None:
            if show_messages:
                QMessageBox.warning(None, "B≈ÇƒÖd", f"Nie znaleziono warstwy: {layer_name}")
            return False
    
    # Sprawdzenie czy warstwa jest wektorowa
    if not isinstance(layer, QgsVectorLayer):
        if show_messages:
            QMessageBox.warning(None, "B≈ÇƒÖd", "Wybrana warstwa nie jest warstwƒÖ wektorowƒÖ")
        return False
    
    # Wyb√≥r pliku QML je≈õli nie zosta≈Ç podany
    if qml_file_path is None:
        qml_file_path, _ = QFileDialog.getOpenFileName(
            None,
            "Wybierz plik stylu QML",
            "",
            "Pliki QML (*.qml);;Wszystkie pliki (*)"
        )
        
        if not qml_file_path:
            return False
    
    # Sprawdzenie czy plik istnieje
    if not os.path.exists(qml_file_path):
        if show_messages:
            QMessageBox.warning(None, "B≈ÇƒÖd", f"Plik QML nie istnieje: {qml_file_path}")
        return False
    
    # Aplikacja stylu
    try:
        result = layer.loadNamedStyle(qml_file_path)
        
        if result[1]:  # result[1] zawiera informacjƒô o powodzeniu operacji
            # Od≈õwie≈ºenie warstwy
            layer.triggerRepaint()
            iface.layerTreeView().refreshLayerSymbology(layer.id())
            
            if show_messages:
                QMessageBox.information(None, "Sukces", 
                    f"Styl zosta≈Ç pomy≈õlnie zastosowany do warstwy: {layer.name()}")
            return True
        else:
            if show_messages:
                QMessageBox.warning(None, "B≈ÇƒÖd", 
                    f"Nie uda≈Ço siƒô za≈Çadowaƒá stylu: {result[0]}")
            return False
            
    except Exception as e:
        if show_messages:
            QMessageBox.critical(None, "B≈ÇƒÖd", f"WystƒÖpi≈Ç b≈ÇƒÖd podczas ≈Çadowania stylu: {str(e)}")
        return False


PREDICTION_DIR = get_prediction_data_dir()

    
    # Czekaj na plik
file_path = wait_for_file()
    
# TUTAJ ROZPOCZYNA SIƒò W≈ÅA≈öCIWY KOD PROGRAMU
print("=" * 50)
print("PLIK ZNALEZIONY! Wykonywanie dalszego kodu...")
print("=" * 50)
   
try:    
    prediction_layer = wczytaj_csv_do_qgis(
        f"{PREDICTION_DIR}/building_predictions.csv",
        nazwa_kolumny_x=None,  # Brak wsp√≥≈Çrzƒôdnych - wczytaj jako tabelƒô
        nazwa_kolumny_y=None,
        nazwa_warstwy="Predykcje_budynkow"
    )

except Exception as e:
        print(f"B≈ÇƒÖd podczas przetwarzania pliku: {e}")

params = {
    'INPUT': QgsProject.instance().mapLayersByName('budynki_z_szer_elew_front')[0],     # ZMIANA: warstwa z geometriƒÖ jako INPUT
    'FIELD': 'ID_BUDYNKU',
    'INPUT_2': QgsProject.instance().mapLayersByName('Predykcje_budynkow')[0],          # ZMIANA: tabela CSV jako INPUT_2  
    'FIELD_2': 'ID_BUDYNKU',
    'FIELDS_TO_COPY': ['PREDYKCJA', 'PEWNOSC'],                                        # ZMIANA: bez zagnie≈ºd≈ºonych nawias√≥w
    'METHOD': 1,
    'DISCARD_NONMATCHING': False,
    'PREFIX': '',
    'OUTPUT': 'memory:budynki_with_predictions'                                        # ZMIANA: inna nazwa
}

joined_layer = processing.run("native:joinattributestable", params)['OUTPUT']
joined_layer.setName('budynki_z_predykcjami')
QgsProject.instance().addMapLayer(joined_layer)
style_name = "budynki_do_analizy.qml"
style_path = os.path.join(SCRIPTS_PATH, style_name)
apply_qml_style_to_layer("budynki_z_predykcjami", style_path)

# G≈Å√ìWNA CZƒò≈öƒÜ KODU
# dodaje kolumne 'nachylenie' i przenosi do niej warstosci obliczone przez algorytm
add_nachylenie_column()

warstwa_poligonowa = QgsProject.instance().mapLayersByName('budynki_z_predykcjami')[0]

# Sprawd≈∫ czy warstwa zosta≈Ça wybrana
if not warstwa_poligonowa:
    print("‚ùå Nie wybrano aktywnej warstwy!")
    exit()

# Wczytaj wcze≈õniej zaklasyfikowane budynki
zaklasyfikowane_budynki = set()
if os.path.exists(csv_file):
    with open(csv_file, newline='', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            zaklasyfikowane_budynki.add(row['ID_BUDYNKU'])
    print(f"üìÇ Wczytano {len(zaklasyfikowane_budynki)} wcze≈õniej zaklasyfikowanych dach√≥w.")

# POPRAWA: Najpierw sprawd≈∫ wszystkie obiekty i znajd≈∫ te niezaklasyfikowane
wszystkie_features = list(warstwa_poligonowa.getFeatures())
niezaklasyfikowane_features = []

for feature in wszystkie_features:
    id_poligonu = str(feature[nazwa_pola])
    if id_poligonu not in zaklasyfikowane_budynki:
        niezaklasyfikowane_features.append(feature)

print(f"üîç Znaleziono {len(niezaklasyfikowane_features)} niezaklasyfikowanych dach√≥w do przetworzenia.")
print(f"üìä Pomijam {len(wszystkie_features) - len(niezaklasyfikowane_features)} ju≈º zaklasyfikowanych dach√≥w.")

# Je≈õli wszystkie sƒÖ zaklasyfikowane, zako≈Ñcz
if not niezaklasyfikowane_features:
    print("‚úÖ Wszystkie dachy sƒÖ ju≈º zaklasyfikowane!")
else:
    # Przetwarzaj tylko niezaklasyfikowane
    for feature in niezaklasyfikowane_features:
        id_poligonu = str(feature[nazwa_pola])
        
        # Wy≈õwietl dach na mapie
        bbox = feature.geometry().boundingBox()
        margines = max(bbox.width() * 0.4, bbox.height() * 0.4)  
        nowy_bbox = bbox.buffered(margines)  
        iface.mapCanvas().setExtent(nowy_bbox)
        warstwa_poligonowa.removeSelection()
        warstwa_poligonowa.select(feature.id())
        iface.mapCanvas().refresh()
        
        # Wy≈õwietl dialog
        sugerowana_kategoria = przewidz_kategorie(feature)[0]
        pewnosc_predykcji = przewidz_kategorie(feature)[1]
        dialog = KategoriaDialog(id_poligonu, sugerowana_kategoria,pewnosc_predykcji, kategorie, iface.mainWindow())
        dialog.show()
        result = dialog.exec_()
        
        if result == QDialog.Accepted:
            kategoria = dialog.get_selected_category()
        elif result == QDialog.Rejected:
            print("üõë Przerwano wyb√≥r kategorii!")
            break
            
        if kategoria == "Zako≈Ñcz":
            print("üõë Zako≈Ñczenie procesu przez u≈ºytkownika.")
            break
            
        if kategoria == "Pomi≈Ñ":
            print(f"üöÄ Pominiƒôto dach {id_poligonu}")
            continue
            
        # Zapisz do CSV
        with open(csv_file, mode="a", newline="", encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow([id_poligonu, kategoria])
            
        print(f"‚úÖ Zapisano: {id_poligonu} (kategoria: {kategoria})")
        
        # Dodaj do zestawu zaklasyfikowanych (≈ºeby uniknƒÖƒá duplikat√≥w w tej sesji)
        zaklasyfikowane_budynki.add(id_poligonu)

print("üéâ Proces klasyfikacji zako≈Ñczony!")

# === RESZTA KODU POZOSTAJE BEZ ZMIAN ===
# Wczytaj dane z CSV
with open(csv_file, newline='', encoding='utf-8') as f: 
    reader = csv.DictReader(f) 
    fieldnames = reader.fieldnames
    
    fields = QgsFields() 
    for name in fieldnames: 
        if name != "id": 
            fields.append(QgsField(name, QVariant.String))
            
    csv_memory_layer = QgsVectorLayer("None", "klasyfikacja_dachow", "memory") 
    csv_memory_layer.dataProvider().addAttributes(fields) 
    csv_memory_layer.updateFields()     
     
    features = [] 
    for row in reader: 
        feat = QgsFeature() 
        feat.initAttributes(len(fields)) 
        for i, name in enumerate(fieldnames): 
            if name != "id": 
                feat[i] = row[name] 
        features.append(feat)  
            
    csv_memory_layer.dataProvider().addFeatures(features) 
    csv_memory_layer.updateExtents()         
                
    QgsProject.instance().addMapLayer(csv_memory_layer) 

# DODAJE KLASYFIKACJE DACH√ìW DO WARSTWY BUDYNK√ìW 
try:
    params = { 
        'INPUT': QgsProject.instance().mapLayersByName('budynki_z_predykcjami')[0], 
        'FIELD': 'ID_BUDYNKU', 
        'INPUT_2': QgsProject.instance().mapLayersByName('klasyfikacja_dachow')[0], 
        'FIELD_2': 'ID_BUDYNKU', 
        'FIELDS_TO_COPY': ['Kategoria'], 
        'METHOD': 1, 
        'DISCARD_NONMATCHING': False, 
        'PREFIX': '', 
        'OUTPUT': 'memory:budynki_parametry' 
    }

    joined_layer = processing.run("native:joinattributestable", params)['OUTPUT'] 
    QgsProject.instance().addMapLayer(joined_layer) 
    zapis_do_gpkg(joined_layer)
    layer = QgsProject.instance().mapLayersByName("budynki_parametry")[0]
    popraw_nachylenie_dla_plaskich(layer)
except Exception as e:
    print(f"B≈ÇƒÖd podczas ≈ÇƒÖczenia z warstwƒÖ budynk√≥w: {e}")

# DODAJE KLASYFIKACJE DACH√ìW DO WARSTWY PUNKT√ìW 
try:
    params = { 
        'INPUT': QgsProject.instance().mapLayersByName('Classification_6_with_IDs')[0], 
        'FIELD': 'ID_BUDYNKU', 
        'INPUT_2': QgsProject.instance().mapLayersByName('klasyfikacja_dachow')[0], 
        'FIELD_2': 'ID_BUDYNKU', 
        'FIELDS_TO_COPY': ['Kategoria'], 
        'METHOD': 1, 
        'DISCARD_NONMATCHING': False, 
        'PREFIX': '', 
        'OUTPUT': 'memory:Classification_6_with_roofsKategories' 
    }

    joined_layer = processing.run("native:joinattributestable", params)['OUTPUT']
    QgsProject.instance().addMapLayer(joined_layer) 
    zapis_do_gpkg(joined_layer)
except Exception as e:
    print(f"Nie znaleziono warstwy 'Classification_6_with_IDs' lub b≈ÇƒÖd: {e}")
    
remove_memory_layers()
